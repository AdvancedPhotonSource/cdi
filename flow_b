iteration flow
--------------

1. ModulusProjection

- save image as previous image

- amplitudes(reciprocical) = ifft(image)

- normalize: amplitudes * data array size

- amplitude_abs = abs(amplitudes)

--- pcdi (modifies amplitude_abs) 

--- cut out roi region and do it on this subarray

--- if update coherence(pcdi trigger)

------- do partial coherence on (2*amplitudes_abs_previous - amplitudes_abs, data_abs)

------- if normalize amplitudes_abs = sqrt( amplitudes_abs^2 / sum(amplitudes_abs^2) * sum(data_abs^2) )

------- kernel set to roi size

------- coherence = do Lucy(amplitudes_abs^2, data_abs^2)

------- find max element in coherence and shift the array in all dimensions to place it at [0,0,0]

------- normalize coherence abs(coh)/norm_coh 

--- amplitudes_abs = sqrt(fftconvolve(abs(amplitudes)^2, coherence) - back to the big dimensions

- apply amplitude threshold on the amplitudes (not affected by pcdi) 

- apply ratio amplitudes * amplitudes_abs/data_abs

- record error = sum(abs(amplitudes)-abs(data))^2/sum(data)^2

- image = fft(amplitudes)

- normalize: image / data array size


2.1 ER
- image * support


2.2 HIO

- image * support + (1 - support) * (prev_image - image * beta))


2.3 ER_NORM

- image_norm_prev

- image * support

- image_norm

- image * sqrt(image_norm/image_norm_prev)


2.4 HIO_NORM

- image_norm_prev

- phases

- phase condition: (phase < params->GetPhaseMin()) || (phase > params->GetPhaseMax()) || (support->GetSupportArray() == 0)

- for phase condition and support replace image with prev_image - image * beta

- image_norm

- image * sqrt(image_norm/image_norm_prev)


3.

- update support (not implemented)


