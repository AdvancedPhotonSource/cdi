// GENERAL
// directory where vtk files are saved, and the data and raw results if configured
save_dir = "results_dir"
// action defines what is processed by the program:
// if "prep_only" the program will only do the data preparation and save in the save_dir
// if "new_guess" the program will do the data prepation and will start reconstruction starting with random guess
// if "continue" the program jumps right to the reconstruction starting with saved data, raw reconstructed image,
// and support. With this action a continue_dir must be defined that contains the saved files. If only data is saved
// the program will start a new guess.
action = "new_guess"
continue_dir = "AB_dir"
// if save_results is true, the prepared data, raw image and support will be saved in the save_dir
save_results = true


// PARAMETER FOR DATA PREPARATION
aliens = ((170,220,112,195,245,123), (50,96,10,60,110,20))
binning = [2,2,2]
center_shift = [0,0,0]
zero_pad = [0,4,0]


// RECONSTRUCTION PARAMETERS USED BY FAST MODULE
// ArrayFire memory management is not reliable, the way around is to call garbage collection per
// defined number of iterations. Decrease this value if out of memory error occurs
gc = 5;

//algorithm_sequence = ((3, ("ER",2), ("HIO", 2), ("ER", 2)), (2, ("ER",3), ("HIO",3)))
//algorithm_sequence = ((1, ("ER",6)))
algorithm_sequence = ((1, ("ER",19), ("HIO", 10)), (1,("ER",10)))
//algorithm_sequence = ((1, ("ER",10), ("HIO", 20)), (1,("ER",10)))
//algorithm_sequence = ((1, ("ER",19), ("HIO", 10)), (1,("ER",10)), (1, ("ER",10), ("HIO", 20)), (1,("ER",10)))

// twin defines at which iteration to cut half of the array(i.e. multiply by 0s), it is done in ER/HIO
// if don't want to apply twin, set it negative
// twin is not applied if action is "continue"
twin = 2;
//twin = -1

amp_threshold = 2.0;
amp_threshold_fill_zeros = true;

phase_min = -2.0;
phase_max = 2.0;
beta = .9;

// support
// trigger list contains starting iteration, step, and ending iteration (if missing, run to the end)
//support_triggers = ((5, 5, 300), (1, 2));
support_triggers = ((4, 5, 300));
//support_triggers = ((1, 5, 300));
support_type = "GAUSS";
support_threshold = 0.1;
support_threshold_adjust = false;
support_sigma = 1;
support_area = [.5,.5,.5];

roi = [32,32,32];

// partial coherence
// if type is not defined, partial coherence is not applied
partial_coherence_type = "LUCY";
partial_coherence_triggers = ((14, 15));
//partial_coherence_triggers = ((1, 15));
partial_coherence_iteration_num = 20;
partial_coherence_normalize = true;
// this is an area that will determine coherence, coherence array will come with this size
partial_coherence_roi = [32,32,32];

regularized_amp = "GAUSS";

avg_iterations = 15;


// PARAMETERS FOR VISUALISATION
// wavelength
lamda = .13933;
// delta (degrees)
delta = 30.1;
// gamma (degrees)
gamma = 14.0;
// camera distance (m)
arm=0.6350;
// angular step size
dth=0.000174532925199;

// detector pixel sixe
pixel = [55.0e-6, 55.0e-6];

// size to crop the image array
crop = [120,120,120]

